<?xml version="1.0" encoding="UTF-8"?>
<project name="hello-world" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="main.class" value="it.ott8bre.ant.HelloWorld" />

	<!-- ============================================================== -->
	<!-- =========================== USAGE ============================ -->
	<!-- ============================================================== -->

	<target name="help">
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
			<arg value="-buildfile" />
			<arg value="${ant.file}" />
		</java>
	</target>

	<!-- ============================================================== -->
	<!-- ======================== PROPERTIES ========================== -->
	<!-- ============================================================== -->

	<property file="build.properties" />

	<property name="main.src.dir" location="src/main/java" description="sources files directory" />
	<property name="main.res.dir" location="src/main/resources" description="resources files directory" />

	<property name="test.src.dir" location="src/test/java" description="source test files directory" />
	<property name="test.res.dir" location="src/test/resources" description="resources test files directory" />

	<property name="classes.dir" location="${build.dir}/classes" />
	<property name="tests.dir" location="${build.dir}/test-classes" />
	<property name="report.dir"  value="${build.dir}/test-report"/>
	<property name="doc.dir"  value="${build.dir}/doc"/>
	<property name="ivy.reports.dir"  location="${build.dir}/ivy-reports"/>


	<!-- ============================================================== -->
	<!-- =========================== SETUP ============================ -->
	<!-- ============================================================== -->
		
	<available classname="org.apache.ivy.Main" property="ivy.installed"/>	

	<target name="install-ivy" unless="ivy.installed">
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar" src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar"/>
        <fail message="Ivy has been installed. Run the build again"/>
    </target>

    <target name="resolve" depends="install-ivy" description="--> use ivy to resolve classpaths">
        <ivy:resolve/>

        <ivy:report todir='${ivy.reports.dir}' graph='false' xml='false'/>

        <ivy:cachepath pathid="compile.path" conf="compile"/>
        <ivy:cachepath pathid="test.path"    conf="test"/>
    </target>	
	
	<!-- ============================================================== -->
	<!-- ========================== SCM TAG =========================== -->
	<!-- ============================================================== -->

	<target name="scm-tag" unless="version">
        <exec executable="git" outputproperty="version" failifexecutionfails="false">
            <arg value="describe"/>
			<arg value="--tags"/>
			<arg value="--abbrev=0"/>
        </exec>
		<condition property="main.name" value="${ant.project.name}-${version}">
			<isset property="version"/>
		</condition>

		<property name="main.name" value="${ant.project.name}" />

		<path id="application" location="${dist.dir}/${main.name}.jar" />
	</target>

	<!-- ============================================================== -->
	<!-- ========================== CLEAN ============================= -->
	<!-- ============================================================== -->

	<target name="clean" description="--> clean the project built files">
		<delete dir="${build.dir}" />
	</target>
	
    <target name="clean-all" depends="clean" description="--> clean + purge ivy cache">
        <ivy:cleancache/>
    </target>

	<!-- ============================================================== -->
	<!-- ========================= COMPILE ============================ -->
	<!-- ============================================================== -->

	<target name="compile" depends="clean,resolve" description="--> compile the project">
		<mkdir dir="${classes.dir}" />
		<copy todir="${classes.dir}">
			<fileset dir="${main.res.dir}" />
		</copy>
		<javac srcdir="${main.src.dir}" destdir="${classes.dir}" classpathref="compile.path" debug="on" includeantruntime="false" />
	</target>

	<target name="compile-test" depends="compile" description="--> compile the project tests">
		<mkdir dir="${tests.dir}" />
		<copy todir="${tests.dir}">
			<fileset dir="${test.res.dir}" />
		</copy>
        <javac srcdir="${test.src.dir}" destdir="${tests.dir}" includeantruntime="false" debug="true">
            <classpath>
                <path refid="test.path"/>
                <pathelement path="${classes.dir}"/>
            </classpath>
        </javac>
	</target>

	<!-- ============================================================== -->
	<!-- =========================== JARS ============================= -->
	<!-- ============================================================== -->

	<target name="jar" depends="compile, scm-tag" description="--> make a jar file for this project">
		<mkdir dir="${dist.dir}" />
		
        <ivy:retrieve pattern="${dist.dir}/lib/[artifact]-[revision](-[classifier]).[ext]" conf="runtime"/>

        <manifestclasspath property="jar.classpath" jarfile="${dist.dir}/${main.name}.jar">
            <classpath>
                <fileset dir="${dist.dir}/lib" includes="*.jar"/>
            </classpath>
        </manifestclasspath>

		<jar destfile="${dist.dir}/${main.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}" />
                <attribute name="Class-Path" value="${jar.classpath}" />
            </manifest>
        </jar>		
	</target>

	<target name="jar-doc" depends="resolve, scm-tag" description="--> make a jar file for javadoc of this project">
		<mkdir dir="${doc.dir}" />
		<javadoc
				destdir="${doc.dir}"
		        author="true"
		        version="true"
		        use="true"
				classpathref="compile.path"
			windowtitle="${main.name}">

		    <packageset dir="${main.src.dir}" defaultexcludes="yes" />

			<doctitle><![CDATA[<h1>${main.name}</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2015 ${main.name} All Rights Reserved.</i>]]></bottom>
		  </javadoc>
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${main.name}-javadoc.jar" basedir="${build.dir}/doc" />
	</target>

	<target name="jar-src" depends="scm-tag" description="--> make a jar file for sources of this project">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${main.name}-sources.jar" basedir="${main.src.dir}" />
	</target>

	<!-- ============================================================== -->
	<!-- ============================ DIST ============================ -->
	<!-- ============================================================== -->

	<target name="dist" depends="clean, test, jar-doc, jar-src" description="--> create distribution jar files" >
	</target>


	<!-- ============================================================== -->
	<!-- ========================== INSTALL =========================== -->
	<!-- ============================================================== -->

	<target name="install" depends="clean, test" description="--> copy the artifact into install dir">
		<mkdir dir="${install.dir}" />
		<copy todir="${install.dir}">
			<fileset dir="${dist.dir}">
				<exclude name="**/*sources.jar"/>
				<exclude name="**/*javadoc.jar"/>
			</fileset>
		</copy>
	</target>

	<!-- ============================================================== -->
	<!-- ============================ RUN ============================= -->
	<!-- ============================================================== -->

	<target name="run" depends="jar" description="--> run project jar">
		<java jar="${dist.dir}/${main.name}.jar" fork="true"/>
	</target>

	<!-- ============================================================== -->
	<!-- ============================ TEST ============================ -->
	<!-- ============================================================== -->

	<target name="test" depends="jar, compile-test" description="--> run tests">
		<mkdir dir="${report.dir}"/>
		<junit printsummary="on"
	    	   fork="false"
	           haltonfailure="false"
	           failureproperty="tests.failed"
	           showoutput="true">
			<classpath>
                <path refid="test.path"/>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${tests.dir}"/>				
			</classpath>

			<formatter type="xml"/>

			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${test.src.dir}" includes="**/*Test*.java" />
			</batchtest>
		</junit>

        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${report.dir}" />
        </junitreport>

	    <fail if="tests.failed">
	    	tests.failed=${tests.failed}
	        ***********************************************************
	        ***********************************************************
	        ****  One or more tests failed!  Check the output ...  ****
	        ***********************************************************
	        ***********************************************************
	    </fail>
	</target>

	<!-- ============================================================== -->
	<!-- ============================ MAIN ============================ -->
	<!-- ============================================================== -->

	<target name="main" depends="test,run" description="--> clean + tests + run"/>

</project>
